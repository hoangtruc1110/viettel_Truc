/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SETTINGVOLUMESCREENVIEWBASE_HPP
#define SETTINGVOLUMESCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/settingvolumescreen_screen/settingVolumeScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <gui/containers/StatusBar.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/containers/progress_indicators/ImageProgress.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class settingVolumeScreenViewBase : public touchgfx::View<settingVolumeScreenPresenter>
{
public:
    settingVolumeScreenViewBase();
    virtual ~settingVolumeScreenViewBase();
    virtual void setupScreen();
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void selectTrigger()
    {
        // Override and implement this function in settingVolumeScreen
    }
    virtual void upTrigger()
    {
        // Override and implement this function in settingVolumeScreen
    }
    virtual void rightTrigger()
    {
        // Override and implement this function in settingVolumeScreen
    }
    virtual void downTrigger()
    {
        // Override and implement this function in settingVolumeScreen
    }
    virtual void leftTrigger()
    {
        // Override and implement this function in settingVolumeScreen
    }
    virtual void backTrigger()
    {
        // Override and implement this function in settingVolumeScreen
    }
    virtual void homeTrigger()
    {
        // Override and implement this function in settingVolumeScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    touchgfx::TextArea textArea1;
    touchgfx::Image image3;
    StatusBar statusBar1;
    touchgfx::Box box2;
    touchgfx::Box box3;
    touchgfx::Box box3_1;
    touchgfx::Box box3_2;
    touchgfx::Box box3_3;
    touchgfx::Circle circle1;
    touchgfx::PainterRGB565 circle1Painter;
    touchgfx::Circle circle1_1;
    touchgfx::PainterRGB565 circle1_1Painter;
    touchgfx::Circle circle1_2;
    touchgfx::PainterRGB565 circle1_2Painter;
    touchgfx::Circle circle1_3;
    touchgfx::PainterRGB565 circle1_3Painter;
    touchgfx::Image image4;
    touchgfx::Image image5;
    touchgfx::ImageProgress volumeRate;
    touchgfx::TextAreaWithOneWildcard volumeValue;

    /*
     * Wildcard Buffers
     */
    static const uint16_t VOLUMEVALUE_SIZE = 3;
    touchgfx::Unicode::UnicodeChar volumeValueBuffer[VOLUMEVALUE_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 3600;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

};

#endif // SETTINGVOLUMESCREENVIEWBASE_HPP
