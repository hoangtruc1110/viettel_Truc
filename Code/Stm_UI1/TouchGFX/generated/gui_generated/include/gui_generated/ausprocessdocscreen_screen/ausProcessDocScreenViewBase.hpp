/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef AUSPROCESSDOCSCREENVIEWBASE_HPP
#define AUSPROCESSDOCSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/ausprocessdocscreen_screen/ausProcessDocScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <gui/containers/StatusBar.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/Container.hpp>
#include <gui/containers/buttonBlue.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>

class ausProcessDocScreenViewBase : public touchgfx::View<ausProcessDocScreenPresenter>
{
public:
    ausProcessDocScreenViewBase();
    virtual ~ausProcessDocScreenViewBase();
    virtual void setupScreen();
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void selectTrigger()
    {
        // Override and implement this function in ausProcessDocScreen
    }
    virtual void upTrigger()
    {
        // Override and implement this function in ausProcessDocScreen
    }
    virtual void rightTrigger()
    {
        // Override and implement this function in ausProcessDocScreen
    }
    virtual void downTrigger()
    {
        // Override and implement this function in ausProcessDocScreen
    }
    virtual void leftTrigger()
    {
        // Override and implement this function in ausProcessDocScreen
    }
    virtual void backTrigger()
    {
        // Override and implement this function in ausProcessDocScreen
    }
    virtual void homeTrigger()
    {
        // Override and implement this function in ausProcessDocScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    touchgfx::TextArea name;
    StatusBar statusBar1;
    touchgfx::Circle circle1;
    touchgfx::PainterRGB565 circle1Painter;
    touchgfx::Circle circle1_1;
    touchgfx::PainterRGB565 circle1_1Painter;
    touchgfx::Circle circle2;
    touchgfx::PainterRGB565 circle2Painter;
    touchgfx::Circle circle2_1;
    touchgfx::PainterRGB565 circle2_1Painter;
    touchgfx::Circle circle3;
    touchgfx::PainterRGB565 circle3Painter;
    touchgfx::Circle circle3_1;
    touchgfx::PainterRGB565 circle3_1Painter;
    touchgfx::Circle circle4;
    touchgfx::PainterRGB565 circle4Painter;
    touchgfx::Circle circle4_1;
    touchgfx::PainterRGB565 circle4_1Painter;
    touchgfx::TextAreaWithOneWildcard textArea1;
    touchgfx::TextAreaWithOneWildcard textArea2;
    touchgfx::TextAreaWithOneWildcard textArea3;
    touchgfx::TextAreaWithOneWildcard textArea4;
    touchgfx::Container stopButton;
    buttonBlue buttonBlue1;
    touchgfx::TextArea textArea1_1;
    touchgfx::Container countingBox;
    touchgfx::ScalableImage scalableImage1;
    touchgfx::Box box3;
    touchgfx::Circle countBlink_1;
    touchgfx::PainterRGB565 countBlink_1Painter;
    touchgfx::Circle countBlink;
    touchgfx::PainterRGB565 countBlinkPainter;
    touchgfx::TextAreaWithOneWildcard secondCount;
    touchgfx::ScalableImage saveButton;
    touchgfx::Line line1;
    touchgfx::PainterRGB565 line1Painter;
    touchgfx::Line line1_1;
    touchgfx::PainterRGB565 line1_1Painter;
    touchgfx::Line line2;
    touchgfx::PainterRGB565 line2Painter;
    touchgfx::Line line2_1;
    touchgfx::PainterRGB565 line2_1Painter;
    touchgfx::Line line3;
    touchgfx::PainterRGB565 line3Painter;
    touchgfx::Line line3_1;
    touchgfx::PainterRGB565 line3_1Painter;
    touchgfx::Line line4;
    touchgfx::PainterRGB565 line4Painter;
    touchgfx::Line line4_1;
    touchgfx::PainterRGB565 line4_1Painter;

    /*
     * Wildcard Buffers
     */
    static const uint16_t SECONDCOUNT_SIZE = 4;
    touchgfx::Unicode::UnicodeChar secondCountBuffer[SECONDCOUNT_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 3600;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

};

#endif // AUSPROCESSDOCSCREENVIEWBASE_HPP
