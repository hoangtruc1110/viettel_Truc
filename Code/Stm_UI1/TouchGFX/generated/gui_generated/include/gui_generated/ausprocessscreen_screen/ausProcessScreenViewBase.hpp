/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef AUSPROCESSSCREENVIEWBASE_HPP
#define AUSPROCESSSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/ausprocessscreen_screen/ausProcessScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <gui/containers/StatusBar.hpp>
#include <touchgfx/containers/progress_indicators/CircleProgress.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/Container.hpp>
#include <gui/containers/buttonBlue.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>

class ausProcessScreenViewBase : public touchgfx::View<ausProcessScreenPresenter>
{
public:
    ausProcessScreenViewBase();
    virtual ~ausProcessScreenViewBase();
    virtual void setupScreen();
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void selectTrigger()
    {
        // Override and implement this function in ausProcessScreen
    }
    virtual void rightTrigger()
    {
        // Override and implement this function in ausProcessScreen
    }
    virtual void leftTrigger()
    {
        // Override and implement this function in ausProcessScreen
    }
    virtual void backTrigger()
    {
        // Override and implement this function in ausProcessScreen
    }
    virtual void homeTrigger()
    {
        // Override and implement this function in ausProcessScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    StatusBar statusBar1;
    touchgfx::CircleProgress circleProgress1;
    touchgfx::PainterRGB565 circleProgress1Painter;
    touchgfx::Image retakeImg;
    touchgfx::Image resumeImg;
    touchgfx::TextAreaWithOneWildcard count;
    touchgfx::Container startImg;
    buttonBlue buttonBlue1;
    touchgfx::TextArea textArea1_1;
    touchgfx::Image pauseImg;
    touchgfx::Image recImg;
    touchgfx::Container warnImg;
    touchgfx::ScalableImage scalableImage2;
    touchgfx::TextArea textArea1;

    /*
     * Wildcard Buffers
     */
    static const uint16_t COUNT_SIZE = 3;
    touchgfx::Unicode::UnicodeChar countBuffer[COUNT_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 3600;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

};

#endif // AUSPROCESSSCREENVIEWBASE_HPP
