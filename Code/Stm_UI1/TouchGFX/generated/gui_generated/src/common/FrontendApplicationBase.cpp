/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <new>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendHeap.hpp>
#include <touchgfx/transitions/NoTransition.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <platform/driver/lcd/LCD16bpp.hpp>
#include <gui/logoscreen_screen/logoScreenView.hpp>
#include <gui/logoscreen_screen/logoScreenPresenter.hpp>
#include <gui/chooserolescreen_screen/chooseRoleScreenView.hpp>
#include <gui/chooserolescreen_screen/chooseRoleScreenPresenter.hpp>
#include <gui/setupwifiscreen_screen/setUpWiFiScreenView.hpp>
#include <gui/setupwifiscreen_screen/setUpWiFiScreenPresenter.hpp>
#include <gui/connectedwifi_screen/connectedWiFiView.hpp>
#include <gui/connectedwifi_screen/connectedWiFiPresenter.hpp>
#include <gui/notconnectedwifi_screen/notConnectedWifiView.hpp>
#include <gui/notconnectedwifi_screen/notConnectedWifiPresenter.hpp>
#include <gui/homescreen_screen/homeScreenView.hpp>
#include <gui/homescreen_screen/homeScreenPresenter.hpp>
#include <gui/livemodescreen_screen/liveModeScreenView.hpp>
#include <gui/livemodescreen_screen/liveModeScreenPresenter.hpp>
#include <gui/rfidscanscreen_screen/rfidScanScreenView.hpp>
#include <gui/rfidscanscreen_screen/rfidScanScreenPresenter.hpp>
#include <gui/scansuccessscreen_screen/scanSuccessScreenView.hpp>
#include <gui/scansuccessscreen_screen/scanSuccessScreenPresenter.hpp>
#include <gui/scanerrorscreen_screen/scanErrorScreenView.hpp>
#include <gui/scanerrorscreen_screen/scanErrorScreenPresenter.hpp>
#include <gui/rfidunlinkedscreen_screen/rfidUnlinkedScreenView.hpp>
#include <gui/rfidunlinkedscreen_screen/rfidUnlinkedScreenPresenter.hpp>
#include <gui/examinationscreen_screen/examinationScreenView.hpp>
#include <gui/examinationscreen_screen/examinationScreenPresenter.hpp>
#include <gui/verifyscreen_screen/verifyScreenView.hpp>
#include <gui/verifyscreen_screen/verifyScreenPresenter.hpp>
#include <gui/tempprocessscreen_screen/tempProcessScreenView.hpp>
#include <gui/tempprocessscreen_screen/tempProcessScreenPresenter.hpp>
#include <gui/tempresultscreen_screen/tempResultScreenView.hpp>
#include <gui/tempresultscreen_screen/tempResultScreenPresenter.hpp>
#include <gui/tempprobescreen_screen/tempProbeScreenView.hpp>
#include <gui/tempprobescreen_screen/tempProbeScreenPresenter.hpp>
#include <gui/tempconnectscreen_screen/tempConnectScreenView.hpp>
#include <gui/tempconnectscreen_screen/tempConnectScreenPresenter.hpp>
#include <gui/sensorinteract_screen/sensorInteractView.hpp>
#include <gui/sensorinteract_screen/sensorInteractPresenter.hpp>
#include <gui/heartbreakstartscreen_screen/heartBreakStartScreenView.hpp>
#include <gui/heartbreakstartscreen_screen/heartBreakStartScreenPresenter.hpp>
#include <gui/realtimespo2screen_screen/realTimeSpo2ScreenView.hpp>
#include <gui/realtimespo2screen_screen/realTimeSpo2ScreenPresenter.hpp>
#include <gui/followinstructionsscreen_screen/followInstructionsScreenView.hpp>
#include <gui/followinstructionsscreen_screen/followInstructionsScreenPresenter.hpp>
#include <gui/ecgstartscreen_screen/ecgStartScreenView.hpp>
#include <gui/ecgstartscreen_screen/ecgStartScreenPresenter.hpp>
#include <gui/realtimeecgscreen_screen/realTimeEcgScreenView.hpp>
#include <gui/realtimeecgscreen_screen/realTimeEcgScreenPresenter.hpp>
#include <gui/accountscreen_screen/accountScreenView.hpp>
#include <gui/accountscreen_screen/accountScreenPresenter.hpp>
#include <gui/logoutscreen_screen/logOutScreenView.hpp>
#include <gui/logoutscreen_screen/logOutScreenPresenter.hpp>
#include <gui/loginscreen_screen/logInScreenView.hpp>
#include <gui/loginscreen_screen/logInScreenPresenter.hpp>
#include <gui/settingaccountscreen_screen/settingAccountScreenView.hpp>
#include <gui/settingaccountscreen_screen/settingAccountScreenPresenter.hpp>
#include <gui/auschoosesidescreen_screen/ausChooseSideScreenView.hpp>
#include <gui/auschoosesidescreen_screen/ausChooseSideScreenPresenter.hpp>
#include <gui/auschooseniplescreen_screen/ausChooseNipleScreenView.hpp>
#include <gui/auschooseniplescreen_screen/ausChooseNipleScreenPresenter.hpp>
#include <gui/ausprocessscreen_screen/ausProcessScreenView.hpp>
#include <gui/ausprocessscreen_screen/ausProcessScreenPresenter.hpp>
#include <gui/auschoosedocscreen_screen/ausChooseDocScreenView.hpp>
#include <gui/auschoosedocscreen_screen/ausChooseDocScreenPresenter.hpp>
#include <gui/ausprocessdocscreen_screen/ausProcessDocScreenView.hpp>
#include <gui/ausprocessdocscreen_screen/ausProcessDocScreenPresenter.hpp>
#include <gui/ausothersdocscreen_screen/ausOthersDocScreenView.hpp>
#include <gui/ausothersdocscreen_screen/ausOthersDocScreenPresenter.hpp>
#include <gui/settingscreen_screen/settingScreenView.hpp>
#include <gui/settingscreen_screen/settingScreenPresenter.hpp>
#include <gui/settingwifiscreen_screen/settingWifiScreenView.hpp>
#include <gui/settingwifiscreen_screen/settingWifiScreenPresenter.hpp>
#include <gui/settingdisplayscreen_screen/settingDisplayScreenView.hpp>
#include <gui/settingdisplayscreen_screen/settingDisplayScreenPresenter.hpp>
#include <gui/settingvolumescreen_screen/settingVolumeScreenView.hpp>
#include <gui/settingvolumescreen_screen/settingVolumeScreenPresenter.hpp>
#include <gui/settingtempscreen_screen/settingTempScreenView.hpp>
#include <gui/settingtempscreen_screen/settingTempScreenPresenter.hpp>
#include <gui/settingupdatescreen_screen/settingUpdateScreenView.hpp>
#include <gui/settingupdatescreen_screen/settingUpdateScreenPresenter.hpp>
#include <gui/settingrebootscreen_screen/settingRebootScreenView.hpp>
#include <gui/settingrebootscreen_screen/settingRebootScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
    touchgfx::Texts::setLanguage(GB);
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
}

/*
 * Screen Transition Declarations
 */

// chooseRoleScreen

void FrontendApplicationBase::gotochooseRoleScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotochooseRoleScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotochooseRoleScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<chooseRoleScreenView, chooseRoleScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// homeScreen

void FrontendApplicationBase::gotohomeScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotohomeScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotohomeScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<homeScreenView, homeScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// liveModeScreen

void FrontendApplicationBase::gotoliveModeScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoliveModeScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoliveModeScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<liveModeScreenView, liveModeScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// rfidScanScreen

void FrontendApplicationBase::gotorfidScanScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotorfidScanScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotorfidScanScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<rfidScanScreenView, rfidScanScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// examinationScreen

void FrontendApplicationBase::gotoexaminationScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoexaminationScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoexaminationScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<examinationScreenView, examinationScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// verifyScreen

void FrontendApplicationBase::gotoverifyScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoverifyScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoverifyScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<verifyScreenView, verifyScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// tempProcessScreen

void FrontendApplicationBase::gototempProcessScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gototempProcessScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gototempProcessScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<tempProcessScreenView, tempProcessScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// tempResultScreen

void FrontendApplicationBase::gototempResultScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gototempResultScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gototempResultScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<tempResultScreenView, tempResultScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// tempProbeScreen

void FrontendApplicationBase::gototempProbeScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gototempProbeScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gototempProbeScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<tempProbeScreenView, tempProbeScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// heartBreakStartScreen

void FrontendApplicationBase::gotoheartBreakStartScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoheartBreakStartScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoheartBreakStartScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<heartBreakStartScreenView, heartBreakStartScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ecgStartScreen

void FrontendApplicationBase::gotoecgStartScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoecgStartScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoecgStartScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ecgStartScreenView, ecgStartScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// accountScreen

void FrontendApplicationBase::gotoaccountScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoaccountScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoaccountScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<accountScreenView, accountScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ausChooseSideScreen

void FrontendApplicationBase::gotoausChooseSideScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoausChooseSideScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoausChooseSideScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ausChooseSideScreenView, ausChooseSideScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ausChooseNipleScreen

void FrontendApplicationBase::gotoausChooseNipleScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoausChooseNipleScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoausChooseNipleScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ausChooseNipleScreenView, ausChooseNipleScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ausProcessScreen

void FrontendApplicationBase::gotoausProcessScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoausProcessScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoausProcessScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ausProcessScreenView, ausProcessScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ausChooseDocScreen

void FrontendApplicationBase::gotoausChooseDocScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoausChooseDocScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoausChooseDocScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ausChooseDocScreenView, ausChooseDocScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ausProcessDocScreen

void FrontendApplicationBase::gotoausProcessDocScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoausProcessDocScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoausProcessDocScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<ausProcessDocScreenView, ausProcessDocScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// settingScreen

void FrontendApplicationBase::gotosettingScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotosettingScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotosettingScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<settingScreenView, settingScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// settingWifiScreen

void FrontendApplicationBase::gotosettingWifiScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotosettingWifiScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotosettingWifiScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<settingWifiScreenView, settingWifiScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// settingDisplayScreen

void FrontendApplicationBase::gotosettingDisplayScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotosettingDisplayScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotosettingDisplayScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<settingDisplayScreenView, settingDisplayScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// settingVolumeScreen

void FrontendApplicationBase::gotosettingVolumeScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotosettingVolumeScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotosettingVolumeScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<settingVolumeScreenView, settingVolumeScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// settingTempScreen

void FrontendApplicationBase::gotosettingTempScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotosettingTempScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotosettingTempScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<settingTempScreenView, settingTempScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// settingUpdateScreen

void FrontendApplicationBase::gotosettingUpdateScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotosettingUpdateScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotosettingUpdateScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<settingUpdateScreenView, settingUpdateScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// settingRebootScreen

void FrontendApplicationBase::gotosettingRebootScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotosettingRebootScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotosettingRebootScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<settingRebootScreenView, settingRebootScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
